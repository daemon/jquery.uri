   jquery.uri(uriString) - A JQuery plugin for inspecting and manipulating a URI.
   
   Typical usage example:
      var uri = $.uri(window.location.href); 
      // Assuming current url is "http://api.jquery.com"
      
      var newUri = uri.at({path: "main/index.html", query: { format: "xml" }};
      window.location.replace(newUri); 
         // Will forward the browser to "http://api.jquery.com/main/index.html?format=xml"

   Parameters: uriString - Input string
   Returns: an immutable object, containing the following properties and methods:
     
   - at: function(partString) 
      Returns the value of the specified URI part. partString can be one 
      of the following strings: "protocol", "domain", "port", "path", "query". 
      Any other value yields an exception. 
       
      The "query" part returns an object that maps parameter names to their values,
      as specified by at the query part of the URI. Both names and values are 
      decoded via decodeURIComponent().

   Example:       
      var uri = $.uri('http://jquery.com:8080/main/index.html?format=json#top');
      assert uri.at('protocol') == 'http'
      assert uri.at('domain') == 'jquery.com'
      assert uri.at('port') == '8080'
      assert uri.at('path') == 'main/index.html'
      assert uri.at('query') == { 'format': 'json' }
      assert uri.at('fragment') == 'top'
          
   - at: function(partString, value)
      Returns a new instance, similar to this one, except that the specified URI 
      part is now set to value. The receiving object is unchanged. partString can 
      be one of the following strings: "protocol", "domain", "port", "path", 
      "query". Any other value will yields an exception. 
        
      Example:       
         var uri = $.uri('http://api.jquery.com:8080/main/index.html?format=json');
         uri = uri.at('port', '2020').at('path', 'welcome.html');
         assert uri.at('port') == '2020'
         assert uri.at('path') == 'welcome.html'
       
      if part == "query" then value should be an object. Properties of these object
      will provide new name,value mapping for the "query" part at the returned object.
      A new mapping will override an existing mapping (with the same name). Existing
      mapping that were not overridden will be available in the new instance.

      Example:       
         var uri = $.uri('http://api.jquery.com?a=1&b=2');
         uri = uri.at('query', { b:200, c:300 });
         assert uri.at('query').a == 1;
         assert uri.at('query').b == 200;
         assert uri.at('query').c == 300;

   - at: function(object)
      Returns a new instance, similar to this one, except that all name,value 
      mappings specified by the parameter are applied the new instance 
      in a manner similar to at(name,value).  The receiving object is unchanged.
       
      Example:       
          var uri = $.uri('http://api.jquery.com:8080/main/index.html?format=json');
          uri = uri.at({ port: '2020', path: 'welcome.html' });
          assert uri.at('port') == '2020'
          assert uri.at('path') == 'welcome.html'
       
      If object.query is defined, then the query part of the result is the same
      as if .at("query", object.query) is called.

      Example:       
         var uri = $.uri('http://api.jquery.com?a=1&b=2');
         uri = uri.at({ query: { b:200, c:300 }});
         assert uri.at('query').a == 1;
         assert uri.at('query').b == 200;
         assert uri.at('query').c == 300;

   - toString(compareFunction)
      Return a well-formed URL representing this object.
      Unspecified components (e.g, if this.port == '') do not appear at the result.
      names and value of parameters at the query part are encoded via encodeURIComponent().
      
      Caller can pass a compareFunction to affect the order of the query part at the 
      result.
      
      parameter: compareFunction 
         A function taking two arguments, a and b, each of which 
         is an object of the form { key: k, value: v } representing the name 
         and value of a parameter (of the query part).  

         Returns 
            -1 if a should appear before b, 
            +1 if a should appear after b, 
            or 0 otherwise.
            
   - resetQuery() 
      Returns a new instance, similar to this one, except that its query part 
      is empty. The receiving object is unchanged.
            
      Example:       
          var uri = $.uri('http://api.jquery.com?a=1&b=2');
          assert uri.resetQuery().at('query') == {}
          
   - defaults(object) 
      Returns a new instance, where properties of the parameter will provide 
      new name,value mapping for the "query" part, unless a similarly named
      parameter is already defined. The receiving object is unchanged.
      
      Example:       
         var uri = $.uri("http://api.jquery.com?a=1&b=2");
         uri = uri.at({ query: { b:200, c:300 }});
         assert uri.at('query').a == 1;
         assert uri.at('query').b == 2;
         assert uri.at('query').c == 300;
       
